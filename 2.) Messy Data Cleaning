{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Dee-Nwanjah/Data-analysis/blob/main/Part2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 800
        },
        "id": "aDag1gE3Zdoz",
        "outputId": "0f39031c-b575-4799-e645-144cac7dc4d1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Original shape: (8083, 6)\n"
          ]
        },
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8083,\n  \"fields\": [\n    {\n      \"column\": \"crawl_timestamp\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 340,\n        \"samples\": [\n          \"2016-04-05 12:30:07+00:00\",\n          \"2016-03-07 04:40:26+00:00\",\n          \"2016-06-15 04:37:36+00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5221,\n        \"samples\": [\n          \"Technotech Q3 Wireless Optical Mouse Gaming Mouse\",\n          \"Gold Dust ABC23007 Automatic Sun Hand Red Manual Sewing Machine\",\n          \"Starsy Solid Women's Round Neck Green T-Shirt\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_category_tree\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4002,\n        \"samples\": [\n          \"[\\\"Automotive >> Car & Bike Accessories >> Car & Bike Care >> Car & Bike Covers >> Bike Body Covers >> Cross Fingers Yamaha Two Wheeler Cover (Silver)\\\"]\",\n          \"[\\\"Clothing >> Women's Clothing >> Fusion Wear >> Jeans & Shorts >> Shorts >> RIPR Shorts >> RIPR Self Design Women's Multicolor Basic Shorts\\\"]\",\n          \"[\\\"Clothing >> Kids' Clothing >> Boys Wear >> Polos & T-Shirts >> YK Polos & T-Shirts >> YK Printed Boy's Round Neck Dark Blue T-Shirt\\\"]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"retail_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10179.249738013095,\n        \"min\": 35.0,\n        \"max\": 116292.0,\n        \"num_unique_values\": 1576,\n        \"samples\": [\n          42554.0,\n          1220.0,\n          36360.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"discounted_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7779.4415142292755,\n        \"min\": 35.0,\n        \"max\": 116292.0,\n        \"num_unique_values\": 1769,\n        \"samples\": [\n          1626.0,\n          244.0,\n          16914.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"brand\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2587,\n        \"samples\": [\n          \"Nuteez\",\n          \"Inddus\",\n          \"Stellar Collections\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-c30547f8-d45b-4ad1-a5e0-5ca498e7f393\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>crawl_timestamp</th>\n",
              "      <th>product_name</th>\n",
              "      <th>product_category_tree</th>\n",
              "      <th>retail_price</th>\n",
              "      <th>discounted_price</th>\n",
              "      <th>brand</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2016-03-25 22:59:23+00:00</td>\n",
              "      <td>Alisha Solid Women's Cycling Shorts</td>\n",
              "      <td>[\"Clothing &gt;&gt; Women's Clothing &gt;&gt; Lingerie, Sl...</td>\n",
              "      <td>999.0</td>\n",
              "      <td>379.0</td>\n",
              "      <td>Alisha</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2016-03-25 22:59:23+00:00</td>\n",
              "      <td>FabHomeDecor Fabric Double Sofa Bed</td>\n",
              "      <td>[\"Furniture &gt;&gt; Living Room Furniture &gt;&gt; Sofa B...</td>\n",
              "      <td>32157.0</td>\n",
              "      <td>22646.0</td>\n",
              "      <td>FabHomeDecor</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2016-03-25 22:59:23+00:00</td>\n",
              "      <td>AW Bellies</td>\n",
              "      <td>[\"Footwear &gt;&gt; Women's Footwear &gt;&gt; Ballerinas &gt;...</td>\n",
              "      <td>999.0</td>\n",
              "      <td>499.0</td>\n",
              "      <td>AW</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2016-03-25 22:59:23+00:00</td>\n",
              "      <td>Alisha Solid Women's Cycling Shorts</td>\n",
              "      <td>[\"Clothing &gt;&gt; Women's Clothing &gt;&gt; Lingerie, Sl...</td>\n",
              "      <td>699.0</td>\n",
              "      <td>267.0</td>\n",
              "      <td>Alisha</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2016-03-25 22:59:23+00:00</td>\n",
              "      <td>Sicons All Purpose Arnica Dog Shampoo</td>\n",
              "      <td>[\"Pet Supplies &gt;&gt; Grooming &gt;&gt; Skin &amp; Coat Care...</td>\n",
              "      <td>220.0</td>\n",
              "      <td>210.0</td>\n",
              "      <td>Sicons</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2016-03-25 22:59:23+00:00</td>\n",
              "      <td>Eternal Gandhi Super Series Crystal Paper Weig...</td>\n",
              "      <td>[\"Eternal Gandhi Super Series Crystal Paper We...</td>\n",
              "      <td>430.0</td>\n",
              "      <td>430.0</td>\n",
              "      <td>Eternal Gandhi</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2016-03-25 22:59:23+00:00</td>\n",
              "      <td>Alisha Solid Women's Cycling Shorts</td>\n",
              "      <td>[\"Clothing &gt;&gt; Women's Clothing &gt;&gt; Lingerie, Sl...</td>\n",
              "      <td>1199.0</td>\n",
              "      <td>479.0</td>\n",
              "      <td>Alisha</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2016-03-25 22:59:23+00:00</td>\n",
              "      <td>FabHomeDecor Fabric Double Sofa Bed</td>\n",
              "      <td>[\"Furniture &gt;&gt; Living Room Furniture &gt;&gt; Sofa B...</td>\n",
              "      <td>32157.0</td>\n",
              "      <td>22646.0</td>\n",
              "      <td>FabHomeDecor</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2016-03-25 22:59:23+00:00</td>\n",
              "      <td>dilli bazaaar Bellies, Corporate Casuals, Casuals</td>\n",
              "      <td>[\"Footwear &gt;&gt; Women's Footwear &gt;&gt; Ballerinas &gt;...</td>\n",
              "      <td>699.0</td>\n",
              "      <td>349.0</td>\n",
              "      <td>dilli bazaaar</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2016-03-25 22:59:23+00:00</td>\n",
              "      <td>Alisha Solid Women's Cycling Shorts</td>\n",
              "      <td>[\"Clothing &gt;&gt; Women's Clothing &gt;&gt; Lingerie, Sl...</td>\n",
              "      <td>1199.0</td>\n",
              "      <td>479.0</td>\n",
              "      <td>Alisha</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c30547f8-d45b-4ad1-a5e0-5ca498e7f393')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c30547f8-d45b-4ad1-a5e0-5ca498e7f393 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c30547f8-d45b-4ad1-a5e0-5ca498e7f393');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7575cc20-a01d-42e7-92df-b02a3d9aec98\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7575cc20-a01d-42e7-92df-b02a3d9aec98')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7575cc20-a01d-42e7-92df-b02a3d9aec98 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "             crawl_timestamp  \\\n",
              "0  2016-03-25 22:59:23+00:00   \n",
              "1  2016-03-25 22:59:23+00:00   \n",
              "2  2016-03-25 22:59:23+00:00   \n",
              "3  2016-03-25 22:59:23+00:00   \n",
              "4  2016-03-25 22:59:23+00:00   \n",
              "5  2016-03-25 22:59:23+00:00   \n",
              "6  2016-03-25 22:59:23+00:00   \n",
              "7  2016-03-25 22:59:23+00:00   \n",
              "8  2016-03-25 22:59:23+00:00   \n",
              "9  2016-03-25 22:59:23+00:00   \n",
              "\n",
              "                                        product_name  \\\n",
              "0                Alisha Solid Women's Cycling Shorts   \n",
              "1                FabHomeDecor Fabric Double Sofa Bed   \n",
              "2                                         AW Bellies   \n",
              "3                Alisha Solid Women's Cycling Shorts   \n",
              "4              Sicons All Purpose Arnica Dog Shampoo   \n",
              "5  Eternal Gandhi Super Series Crystal Paper Weig...   \n",
              "6                Alisha Solid Women's Cycling Shorts   \n",
              "7                FabHomeDecor Fabric Double Sofa Bed   \n",
              "8  dilli bazaaar Bellies, Corporate Casuals, Casuals   \n",
              "9                Alisha Solid Women's Cycling Shorts   \n",
              "\n",
              "                               product_category_tree  retail_price  \\\n",
              "0  [\"Clothing >> Women's Clothing >> Lingerie, Sl...         999.0   \n",
              "1  [\"Furniture >> Living Room Furniture >> Sofa B...       32157.0   \n",
              "2  [\"Footwear >> Women's Footwear >> Ballerinas >...         999.0   \n",
              "3  [\"Clothing >> Women's Clothing >> Lingerie, Sl...         699.0   \n",
              "4  [\"Pet Supplies >> Grooming >> Skin & Coat Care...         220.0   \n",
              "5  [\"Eternal Gandhi Super Series Crystal Paper We...         430.0   \n",
              "6  [\"Clothing >> Women's Clothing >> Lingerie, Sl...        1199.0   \n",
              "7  [\"Furniture >> Living Room Furniture >> Sofa B...       32157.0   \n",
              "8  [\"Footwear >> Women's Footwear >> Ballerinas >...         699.0   \n",
              "9  [\"Clothing >> Women's Clothing >> Lingerie, Sl...        1199.0   \n",
              "\n",
              "   discounted_price           brand  \n",
              "0             379.0          Alisha  \n",
              "1           22646.0    FabHomeDecor  \n",
              "2             499.0              AW  \n",
              "3             267.0          Alisha  \n",
              "4             210.0          Sicons  \n",
              "5             430.0  Eternal Gandhi  \n",
              "6             479.0          Alisha  \n",
              "7           22646.0    FabHomeDecor  \n",
              "8             349.0   dilli bazaaar  \n",
              "9             479.0          Alisha  "
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load the messy data\n",
        "df = pd.read_csv('OnlineOrders_of_a_ecommerce_website.csv')\n",
        "print(\"Original shape:\", df.shape)\n",
        "df.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7w0fsiyua5eq",
        "outputId": "aed249ae-4144-4bea-8546-83dc98af6069"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Missing values per column:\n",
            "Series([], dtype: int64)\n"
          ]
        }
      ],
      "source": [
        "# Check for missing values\n",
        "print(\"Missing values per column:\")\n",
        "missing_data = df.isnull().sum()\n",
        "print(missing_data[missing_data > 0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 548
        },
        "id": "tEQ6LWAbc0EA",
        "outputId": "e932f03a-2281-463f-dcc5-a8783506439e"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Visualize missing data pattern\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Create missing data heatmap\n",
        "plt.figure(figsize=(12, 8))\n",
        "missing_mask = df.isnull()\n",
        "\n",
        "# Plot heatmap of missing values\n",
        "plt.imshow(missing_mask, aspect='auto', cmap='viridis', alpha=0.8)\n",
        "plt.title('Missing Data Pattern (Yellow = Missing)')\n",
        "plt.xlabel('Columns')\n",
        "plt.ylabel('Rows')\n",
        "plt.xticks(range(len(df.columns)), df.columns, rotation=90)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vUY874dmgBCP",
        "outputId": "1bfbf9b7-3f27-4b8a-9f9a-48c37e63388a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Data types:\n",
            "crawl_timestamp           object\n",
            "product_name              object\n",
            "product_category_tree     object\n",
            "retail_price             float64\n",
            "discounted_price         float64\n",
            "brand                     object\n",
            "dtype: object\n"
          ]
        }
      ],
      "source": [
        "# Check data types\n",
        "print(\"\\nData types:\")\n",
        "print(df.dtypes)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ImSRA5uZgFpq",
        "outputId": "600f92f2-1a6b-41b7-bf9d-bcfe3e01e574"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Duplicate rows: 1331\n",
            "Duplicate rows found:\n",
            "                crawl_timestamp                             product_name  \\\n",
            "7     2016-03-25 22:59:23+00:00      FabHomeDecor Fabric Double Sofa Bed   \n",
            "9     2016-03-25 22:59:23+00:00      Alisha Solid Women's Cycling Shorts   \n",
            "12    2016-03-25 22:59:23+00:00      Alisha Solid Women's Cycling Shorts   \n",
            "14    2016-03-25 22:59:23+00:00      Alisha Solid Women's Cycling Shorts   \n",
            "15    2016-03-25 22:59:23+00:00      FabHomeDecor Fabric Double Sofa Bed   \n",
            "...                         ...                                      ...   \n",
            "8025  2016-03-03 06:06:42+00:00                    Simrit Women's Nighty   \n",
            "8038  2016-03-03 06:06:42+00:00  Shreeka Women's Patiala and Dupatta Set   \n",
            "8050  2016-06-12 21:55:11+00:00                 ALL DAY 365 Shoulder Bag   \n",
            "8054  2016-06-12 21:55:11+00:00             GAJ IMPEX Acrylic Bangle Set   \n",
            "8058  2016-06-12 21:55:11+00:00             GAJ IMPEX Acrylic Bangle Set   \n",
            "\n",
            "                                  product_category_tree  retail_price  \\\n",
            "7     [\"Furniture >> Living Room Furniture >> Sofa B...       32157.0   \n",
            "9     [\"Clothing >> Women's Clothing >> Lingerie, Sl...        1199.0   \n",
            "12    [\"Clothing >> Women's Clothing >> Lingerie, Sl...         999.0   \n",
            "14    [\"Clothing >> Women's Clothing >> Lingerie, Sl...         999.0   \n",
            "15    [\"Furniture >> Living Room Furniture >> Sofa B...       32157.0   \n",
            "...                                                 ...           ...   \n",
            "8025  [\"Clothing >> Women's Clothing >> Lingerie, Sl...        2985.0   \n",
            "8038  [\"Clothing >> Women's Clothing >> Ethnic Wear ...        1499.0   \n",
            "8050  [\"Bags, Wallets & Belts >> Bags >> Hand Bags >...         999.0   \n",
            "8054  [\"Jewellery >> Bangles, Bracelets & Armlets >>...         699.0   \n",
            "8058  [\"Jewellery >> Bangles, Bracelets & Armlets >>...         789.0   \n",
            "\n",
            "      discounted_price         brand  \n",
            "7              22646.0  FabHomeDecor  \n",
            "9                479.0        Alisha  \n",
            "12               379.0        Alisha  \n",
            "14               379.0        Alisha  \n",
            "15             22646.0  FabHomeDecor  \n",
            "...                ...           ...  \n",
            "8025             895.0        Simrit  \n",
            "8038             699.0       Shreeka  \n",
            "8050             499.0   ALL DAY 365  \n",
            "8054             466.0     GAJ IMPEX  \n",
            "8058             526.0     GAJ IMPEX  \n",
            "\n",
            "[1331 rows x 6 columns]\n"
          ]
        }
      ],
      "source": [
        "# Check for duplicates\n",
        "print(f\"\\nDuplicate rows: {df.duplicated().sum()}\")\n",
        "if df.duplicated().sum() > 0:\n",
        "    print(\"Duplicate rows found:\")\n",
        "    print(df[df.duplicated()])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nV9KajH7g9kH"
      },
      "outputs": [],
      "source": [
        "# handle duplicates\n",
        "df.drop_duplicates(inplace=True)\n",
        "\n",
        "# handle missing values\n",
        "df.dropna(inplace=True)\n",
        "\n",
        "# Handle any remaining type issues\n",
        "# Check for non-numeric values in numeric columns\n",
        "numeric_columns = ['retail_price', 'discounted_price']\n",
        "for col in numeric_columns:\n",
        "    if col in df.columns:\n",
        "        non_numeric = pd.to_numeric(df[col], errors='coerce').isnull().sum()\n",
        "        if non_numeric > 0:\n",
        "            print(f\"Non-numeric values in {col}: {non_numeric}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "074be118"
      },
      "source": [
        "## Data Quality Report\n",
        "\n",
        "Based on the initial data loading and cleaning steps, here's a report on the data quality of the `OnlineOrders_of_a_ecommerce_website.csv` dataset."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f1897fe9"
      },
      "source": [
        "### 1. Data Overview\n",
        "\n",
        "- **Original shape:** (8083, 6)\n",
        "- **Columns:** `crawl_timestamp`, `product_name`, `product_category_tree`, `retail_price`, `discounted_price`, `brand`\n",
        "- **Data types:**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3c36e32b",
        "outputId": "ebc5ac02-12d4-4a64-d3df-64e789bfe8aa"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "crawl_timestamp           object\n",
            "product_name              object\n",
            "product_category_tree     object\n",
            "retail_price             float64\n",
            "discounted_price         float64\n",
            "brand                     object\n",
            "dtype: object\n"
          ]
        }
      ],
      "source": [
        "print(df.dtypes)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "10189d76"
      },
      "source": [
        "### 2. Data Cleaning Steps Performed\n",
        "\n",
        "- **Duplicate Handling:** Removed 1331 duplicate rows.\n",
        "- **Missing Value Handling:** Dropped rows with any missing values (although initial checks showed no missing values, this step was included for robustness)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dcb49568"
      },
      "source": [
        "### 3. Data Quality Summary After Cleaning\n",
        "\n",
        "- **Shape after cleaning:**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d364a39b",
        "outputId": "6d7103c9-3f8f-4dca-83fd-887805e4ab26"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Shape after cleaning: (6752, 6)\n"
          ]
        }
      ],
      "source": [
        "print(\"Shape after cleaning:\", df.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a84aabcb"
      },
      "source": [
        "- **Missing values after cleaning:**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "03d7cf11",
        "outputId": "d1fa1873-c7fb-4d14-972c-5272ca98d231"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Missing values per column after cleaning:\n",
            "Series([], dtype: int64)\n"
          ]
        }
      ],
      "source": [
        "print(\"Missing values per column after cleaning:\")\n",
        "missing_data_after_cleaning = df.isnull().sum()\n",
        "print(missing_data_after_cleaning[missing_data_after_cleaning > 0])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eafd2042"
      },
      "source": [
        "- **Duplicate rows after cleaning:**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "10b9708f",
        "outputId": "b1ab2a31-6e1d-452c-f0b6-9f4e2ce970c4"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Duplicate rows after cleaning: 0\n"
          ]
        }
      ],
      "source": [
        "print(f\"Duplicate rows after cleaning: {df.duplicated().sum()}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ab3aca20"
      },
      "source": [
        "### 4. Further Data Quality Checks\n",
        "\n",
        "Let's examine specific columns for potential issues.\n",
        "\n",
        "#### `crawl_timestamp`\n",
        "\n",
        "This column is currently of `object` type. It should be converted to a datetime object for time-based analysis."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5dffbf08",
        "outputId": "47fc8be6-0c2f-4897-e03f-9f536cdfc837"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Successfully converted 'crawl_timestamp' to datetime.\n",
            "\n",
            "Data types after converting 'crawl_timestamp':\n",
            "crawl_timestamp          datetime64[ns, UTC]\n",
            "product_name                          object\n",
            "product_category_tree                 object\n",
            "retail_price                         float64\n",
            "discounted_price                     float64\n",
            "brand                                 object\n",
            "dtype: object\n"
          ]
        }
      ],
      "source": [
        "try:\n",
        "    df['crawl_timestamp'] = pd.to_datetime(df['crawl_timestamp'], errors='coerce')\n",
        "    print(\"Successfully converted 'crawl_timestamp' to datetime.\")\n",
        "    print(\"\\nData types after converting 'crawl_timestamp':\")\n",
        "    print(df.dtypes)\n",
        "except Exception as e:\n",
        "    print(f\"Error converting 'crawl_timestamp' to datetime: {e}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ef1de377"
      },
      "source": [
        "#### `retail_price` and `discounted_price`\n",
        "\n",
        "These columns are `float64`. We previously checked for non-numeric values and none were found after cleaning. We can check for any unrealistic values (e.g., negative prices)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "214e9fd2",
        "outputId": "958fbcf9-9e61-426a-c941-249e18b6fb46"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Checking for unrealistic prices:\n",
            "Rows with unrealistic prices: 0\n"
          ]
        }
      ],
      "source": [
        "print(\"\\nChecking for unrealistic prices:\")\n",
        "unrealistic_prices = df[(df['retail_price'] < 0) | (df['discounted_price'] < 0)]\n",
        "print(f\"Rows with unrealistic prices: {len(unrealistic_prices)}\")\n",
        "if len(unrealistic_prices) > 0:\n",
        "    display(unrealistic_prices)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6d9b1801"
      },
      "source": [
        "#### `product_category_tree`\n",
        "\n",
        "This column contains nested categories in a string format. For analysis, this column would need to be parsed to extract individual category levels. We can check for any variations in the string format."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9b92889b",
        "outputId": "e2875703-cef0-473a-b0ca-fc533e226cdd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Checking unique formats in 'product_category_tree' (first 10 unique values):\n",
            "['[\"Clothing >> Women\\'s Clothing >> Lingerie, Sleep & Swimwear >> Shorts >> Alisha Shorts >> Alisha Solid Women\\'s Cycling Shorts\"]'\n",
            " '[\"Furniture >> Living Room Furniture >> Sofa Beds & Futons >> FabHomeDecor Fabric Double Sofa Bed (Finish Colo...\"]'\n",
            " '[\"Footwear >> Women\\'s Footwear >> Ballerinas >> AW Bellies\"]'\n",
            " '[\"Pet Supplies >> Grooming >> Skin & Coat Care >> Shampoo >> Sicons All Purpose Arnica Dog Shampoo (500 ml)\"]'\n",
            " '[\"Eternal Gandhi Super Series Crystal Paper Weight...\"]'\n",
            " '[\"Footwear >> Women\\'s Footwear >> Ballerinas >> dilli bazaaar Bellies, Corporate Casuals, Casuals\"]'\n",
            " '[\"Footwear >> Women\\'s Footwear >> Ballerinas >> Ladela Bellies\"]'\n",
            " '[\"Clothing >> Women\\'s Clothing >> Sports & Gym Wear >> Swimsuits >> Carrel Swimsuits >> Carrel Printed Women\\'s\"]'\n",
            " '[\"Pens & Stationery >> School Supplies >> Water Bottles >> Freelance Water Bottles >> Freelance Vacuum Bottles 350 ml Bottle (Pack of ...\"]'\n",
            " '[\"Footwear >> Women\\'s Footwear >> Ballerinas >> Style Foot Bellies\"]']\n"
          ]
        }
      ],
      "source": [
        "print(\"\\nChecking unique formats in 'product_category_tree' (first 10 unique values):\")\n",
        "print(df['product_category_tree'].unique()[:10])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f54670d3"
      },
      "source": [
        "#### `brand`\n",
        "\n",
        "This column is of `object` type. We can check the number of unique brands and look for potential inconsistencies in naming (e.g., variations in capitalization or spelling)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "75f30747",
        "outputId": "cbd25d53-2afc-434e-f728-f236375fa930"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Number of unique brands: 2587\n",
            "\n",
            "Top 20 most frequent brands:\n",
            "brand\n",
            "Karatcraft          211\n",
            "Black               141\n",
            "Radiant Bay         132\n",
            "White               110\n",
            "Speedwav            104\n",
            "BlueStone            93\n",
            "Pink                 79\n",
            "AdroitZ              72\n",
            "Purple               68\n",
            "Red                  66\n",
            "Blue                 59\n",
            "Easy Gardening       56\n",
            "Beige                51\n",
            "First Smart Deal     41\n",
            "Anuradha Art         38\n",
            "Voylla               37\n",
            "PRINT SHAPES         36\n",
            "Lapguard             31\n",
            "Clovia               29\n",
            "Digilight            27\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "print(f\"\\nNumber of unique brands: {df['brand'].nunique()}\")\n",
        "print(\"\\nTop 20 most frequent brands:\")\n",
        "print(df['brand'].value_counts().head(20))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6a839e2b"
      },
      "source": [
        "### 5. Summary\n",
        "\n",
        "- Duplicates have been removed.\n",
        "- No missing values were found after cleaning (consistent with initial checks).\n",
        "- Data types are generally appropriate, but `crawl_timestamp` needs conversion for time-based analysis.\n",
        "- `retail_price` and `discounted_price` appear to have no unrealistic negative values.\n",
        "- `product_category_tree` and `brand` columns are in object format and will require further parsing and standardization depending on the analysis goals.\n",
        "\n",
        "This report provides a snapshot of the data quality after initial cleaning. Further analysis may reveal additional data quality issues that need to be addressed."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "jtcW-bqNt5Te",
        "outputId": "51744995-f603-4212-fb42-d17b9c391328"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Cleaned data saved! Shape: (6752, 6)\n",
            "\n",
            "Original shape: (8083, 6)\n",
            "Cleaned shape: (6752, 6)\n",
            "Rows removed: 1331\n"
          ]
        }
      ],
      "source": [
        "# Save the cleaned dataset\n",
        "df.to_csv('cleaned_data.csv', index=False)\n",
        "print(f\"Cleaned data saved! Shape: {df.shape}\")\n",
        "\n",
        "# Compare before and after\n",
        "# We need the original shape before any cleaning was done.\n",
        "# Assuming the original shape was printed after loading the data.\n",
        "# If you need the exact original shape, please refer to the initial output.\n",
        "original_shape = (8083, 6) # From the output of the first cell\n",
        "print(f\"\\nOriginal shape: {original_shape}\")\n",
        "print(f\"Cleaned shape: {df.shape}\")\n",
        "print(f\"Rows removed: {original_shape[0] - df.shape[0]}\")"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPS/4HasQ30kG/bYMYd+NO/",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
